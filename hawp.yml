Description: >
  Nishan Vivekanandan / For Udacity Cloud DevOps Project 2

  This template deploys the following
    Network - VPC with a pair of public and private subnets across 2 Availability zones.
            - IGW, Pair of NAT gateways and default routes for the private and public subnets.
            #TODO Description

Parameters:
  EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

  VpcCIDR: 
      Description: Please enter the IP range (CIDR notation) for this VPC
      Type: String
      Default: 10.0.0.0/16

  PublicSubnetACIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
      Type: String
      Default: 10.0.0.0/24

  PublicSubnetBCIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
      Type: String
      Default: 10.0.1.0/24

  PrivateSubnetACIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
      Type: String
      Default: 10.0.2.0/24

  PrivateSubnetBCIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
      Type: String
      Default: 10.0.3.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA: 
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnetACIDR
        MapPublicIpOnLaunch: true
        Tags: 
            - Key: Name 
              Value: !Sub ${EnvironmentName} Public Subnet (A)

  PublicSubnetB: 
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnetBCIDR
        MapPublicIpOnLaunch: true
        Tags: 
            - Key: Name 
              Value: !Sub ${EnvironmentName} Public Subnet (B)

  PrivateSubnetA: 
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PrivateSubnetACIDR
        MapPublicIpOnLaunch: false
        Tags: 
            - Key: Name 
              Value: !Sub ${EnvironmentName} Private Subnet (A)

  PrivateSubnetB: 
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs '' ]
        CidrBlock: !Ref PrivateSubnetBCIDR
        MapPublicIpOnLaunch: false
        Tags: 
            - Key: Name 
              Value: !Sub ${EnvironmentName} Private Subnet (B)
 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
 
  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NatGatewayAEIP
    
  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NatGatewayBEIP

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NatGatewayA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NatGatewayB    
  
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
        VpcId: !Ref VPC
        Tags: 
            - Key: Name 
              Value: !Sub ${EnvironmentName} Private Routes (A)

  DefaultPrivateRouteA:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTableA
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTableA
          SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Routes (B)

  DefaultPrivateRouteB:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTableB
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGatewayB

  PrivateSubnetBRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTableB
          SubnetId: !Ref PrivateSubnetB

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: IAM Role for environment instances.
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "ec2.amazonaws.com"
              Action:
                - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - 
         PolicyName: !Sub ${EnvironmentName}-BucketAccessPolicy
         PolicyDocument:
           Version: "2012-10-17"
           Statement:
              - 
                Effect: "Allow"
                Action: "s3:ListBucket"
                Resource: "arn:aws:s3:::vivek.tech.hawp"
              - 
                Effect: "Allow"
                Action: 
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: "arn:aws:s3:::vivek.tech.hawp/*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  
        

  WebAppServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-WebAppServerSG
      GroupDescription: "Allow http to client host"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp #TODO: Remove if using SSM or other access method in final release
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0       

  WebAppServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub ${EnvironmentName}-WebAppServerLaunchConfig
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: ami-06d51e91cea0dac8d      #TODO: Make parameter.
      InstanceMonitoring: false #5 min metrics should be good enough and is free.
      InstanceType: t3.medium
      KeyName:  UdacityCLI
      SecurityGroups:
        - !Ref WebAppServerSG
      UserData:
        Fn::Base64:
           !Sub |
              #!/bin/bash -xe
              apt-get update -y
              apt-get install unzip awscli -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              aws s3 cp s3://vivek.tech.hawp/site.zip . #TODO: Make parameter store
              unzip -o site.zip
              UUID=$(cat /proc/sys/kernel/random/uuid)
              echo "<p>You are on server $UUID</p>" >> index.html
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10

  WebAppServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: 
        - !Select [ 0, !GetAZs '' ] #TODO: Get from parameters or elsewhere??
        - !Select [ 1, !GetAZs '' ]
      VPCZoneIdentifier:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      LaunchConfigurationName: !Ref WebAppServerLaunchConfig
      MaxSize: '4'
      MinSize: '2'
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebAppServerASG
          PropagateAtLaunch: True
      TargetGroupARNs:
        - !Ref WebAppTargetGroup

  WebAppLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-WebAppLoadBalancerSG   
      GroupDescription: Allow Loadbalancer port 80      
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0      

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
       HealthCheckPath: /
       Port: 80
       Protocol: HTTP
       HealthCheckProtocol: HTTP
       HealthCheckIntervalSeconds: 35
       HealthCheckTimeoutSeconds: 30
       HealthyThresholdCount: 2
       UnhealthyThresholdCount: 2
       VpcId: !Ref VPC

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Sub ${EnvironmentName}-WebAppServerLB
      SecurityGroups: 
        - !Ref WebAppLoadBalancerSG
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

  WebAppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref WebAppLoadBalancer


 
#TODO: Allow remote access to webservers via bastion host or SSM
#TODO: go through script and add comments for future reference
#TODO: Ensure autoscaling scales/repairs
#TODO: Switch ASG health check to loadbalancer
#TODO: Look into instance updates



  
  